---
import { categories } from '../lib/categories';

const searchParams = Astro.url.searchParams;
const error = searchParams.get('error');
const success = searchParams.get('success');

let message = '';
let messageType = '';

if (error) {
  messageType = 'error';
  switch (error) {
    case 'missing-fields':
      message = 'Veuillez remplir tous les champs';
      break;
    case 'processing':
      message = 'Erreur lors du traitement de l\'article';
      break;
    default:
      message = 'Une erreur est survenue';
  }
} else if (success) {
  messageType = 'success';
  message = 'Article ajouté avec succès';
}

const categoryOptions = Object.values(categories).map(cat => ({
  value: cat.name,
  label: cat.name
}));
---

<div class="fixed bottom-4 right-4 z-50">
  <button
    id="openModalBtn"
    class="bg-accent-500 hover:bg-accent-600 text-white px-4 py-2 rounded-lg shadow-lg transition-colors duration-200 flex items-center gap-2"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
    </svg>
    Ajouter un article
  </button>

  <!-- Modal -->
  <div id="addArticleModal" class="fixed inset-0 bg-black/50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-xl shadow-2xl p-6 max-w-md w-full">
        <h3 class="text-2xl font-playfair font-bold text-primary-900 mb-4">
          Ajouter un article
        </h3>
        
        <form action="/api/submit-url" method="POST" class="space-y-4">
          <div>
            <label for="title" class="block text-sm font-medium text-primary-700 mb-1">
              Titre de l'article
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              placeholder="Entrez le titre de l'article"
              class="w-full px-3 py-2 border border-primary-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            />
          </div>

          <div>
            <label for="url" class="block text-sm font-medium text-primary-700 mb-1">
              URL de l'article
            </label>
            <input
              type="url"
              id="url"
              name="url"
              required
              placeholder="https://exemple.com/article"
              class="w-full px-3 py-2 border border-primary-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            />
          </div>

          <div>
            <label for="category" class="block text-sm font-medium text-primary-700 mb-1">
              Catégorie
            </label>
            <select
              id="category"
              name="category"
              required
              class="w-full px-3 py-2 border border-primary-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            >
              <option value="">Sélectionnez une catégorie</option>
              {categoryOptions.map(cat => (
                <option value={cat.value}>{cat.label}</option>
              ))}
            </select>
          </div>

          <div>
            <label for="description" class="block text-sm font-medium text-primary-700 mb-1">
              Description / Synthèse
            </label>
            <textarea
              id="description"
              name="description"
              required
              rows="4"
              placeholder="Entrez une brève description ou synthèse de l'article..."
              class="w-full px-3 py-2 border border-primary-200 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent resize-none"
            ></textarea>
            <p class="mt-1 text-sm text-primary-500">
              Cette description apparaîtra comme résumé de l'article
            </p>
          </div>

          {message && (
            <p class={`text-sm ${messageType === 'error' ? 'text-red-600' : 'text-green-600'}`}>
              {message}
            </p>
          )}

          <div class="flex justify-end gap-3 pt-4">
            <button
              type="button"
              id="closeModalBtn"
              class="px-4 py-2 text-primary-700 hover:bg-primary-50 rounded-lg transition-colors"
            >
              Annuler
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-accent-500 hover:bg-accent-600 text-white rounded-lg transition-colors"
            >
              Ajouter
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById('addArticleModal');
  const openBtn = document.getElementById('openModalBtn');
  const closeBtn = document.getElementById('closeModalBtn');
  
  openBtn?.addEventListener('click', () => {
    modal?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  });

  closeBtn?.addEventListener('click', () => {
    modal?.classList.add('hidden');
    document.body.style.overflow = '';
  });

  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  });
</script>

<style>
  .modal-open {
    overflow: hidden;
  }
</style>